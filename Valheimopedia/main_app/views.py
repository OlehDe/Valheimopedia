# main_app/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from .forms import RegistrationForm, UserLoginForm
from .models import Comment

# üîΩ –ù–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON —Ç–∞ —à–ª—è—Ö–∞–º–∏
import json
from django.conf import settings


# üîº –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤

def home(request):
    return render(request, 'main_app/home.html')


def register_view(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('main_app:home')
        else:
            # ‚¨áÔ∏è –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ü—é –∂ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –Ω–∏–º–∏
            return render(request, 'main_app/register.html', {'form': form})
    else:
        form = RegistrationForm()
    return render(request, 'main_app/register.html', {'form': form})


def login_view(request):
    if request.method == 'POST':
        form = UserLoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user:
                login(request, user)
                return redirect('main_app:home')
    else:
        form = UserLoginForm()
    return render(request, 'main_app/login.html', {'form': form})


@login_required
def logout_view(request):
    logout(request)
    return redirect('main_app:home')


@login_required
def account_view(request):
    user_comments = Comment.objects.filter(author=request.user)
    return render(request, 'main_app/account.html', {
        'user_comments': user_comments
    })


@login_required
def user_comments(request):
    comments = Comment.objects.filter(author=request.user)
    return render(request, 'main_app/user_comments.html', {'comments': comments})


@login_required
def comment_delete(request, pk):
    comment = Comment.objects.get(pk=pk)
    if comment.author == request.user or request.user.is_staff:
        comment.delete()
    return redirect('main_app:user_comments')


# üîΩ======================================
# üîΩ –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è JSON
# üîΩ======================================
def all_items_view(request):
    # –ë—É–¥—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.
    # –¶–µ –ø—Ä–∏–ø—É—Å–∫–∞—î, —â–æ –ø–∞–ø–∫–∞ 'data' –ª–µ–∂–∏—Ç—å —É –∫–æ—Ä–µ–Ω—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É (–ø–æ—Ä—è–¥ –∑ manage.py)
    file_path = settings.BASE_DIR / 'data' / 'items.json'

    items_data = []  # –°–ø–∏—Å–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    error_message = None  # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏

    try:
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        with open(file_path, 'r', encoding='utf-8') as f:
            items_data = json.load(f)

    except FileNotFoundError:
        error_message = f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º {file_path}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î."
    except json.JSONDecodeError:
        error_message = "–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª 'items.json' –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –º–∞—î –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON."
    except Exception as e:
        error_message = f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}"

    # –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –º–æ–∂–ª–∏–≤—É –ø–æ–º–∏–ª–∫—É —É —à–∞–±–ª–æ–Ω
    return render(request, 'main_app/all_items.html', {
        'items': items_data,
        'error': error_message
    })
# üîº======================================
# üîº –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
# üîº======================================